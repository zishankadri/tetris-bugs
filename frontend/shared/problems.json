[
    {
      "problem_id": 1,
      "title": "Add Two Numbers",
      "func_name":"add_nums",
      "description": "Write a function named 'add_nums' that takes two numbers as input and returns their sum.",
      "solution_code": "def add_nums(a,b):\n    return a+b",
      "test_cases": [
        {
          "input": [5, 3],
          "expected_output": 8
        },
        {
          "input": [0, 0],
          "expected_output": 0
        },
        {
          "input": [-10, 5],
          "expected_output": -5
        }
      ]
    },
    {
      "problem_id": 2,
      "title": "Reverse a String",
      "func_name":"rev_string",
      "description": "Write a function named 'rev_string' that takes a string as input and returns the string reversed.",
      "solution_code": "def rev_string(s):\n    return s[::-1]",
      "test_cases": [
        {
          "input": "hello",
          "expected_output": "olleh"
        },
        {
          "input": "Python",
          "expected_output": "nohtyP"
        },
        {
          "input": "a",
          "expected_output": "a"
        }
      ]
    },
    {
      "problem_id": 3,
      "title": "Check if a Number is Even",
      "func_name":"is_even",
      "description": "Write a function named 'is_even' that takes an integer and returns True if it's even, otherwise False.",
      "solution_code": "def is_even(n):\n    return n%2==0",
      "test_cases": [
        {
          "input": 4,
          "expected_output": "True"
        },
        {
          "input": 7,
          "expected_output": "False"
        },
        {
          "input": 0,
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": 4,
      "title": "Find the Maximum Number in a List",
      "func_name":"find_max",
      "description": "Write a function named 'find_max' that takes a list of numbers and returns the largest number in the list.",
      "solution_code": "def find_max(nums):\n    return max(nums)",
      "test_cases": [
        {
          "input": [1, 5, 2, 8, 3],
          "expected_output": 8
        },
        {
          "input": [-10, -2, -5],
          "expected_output": -2
        },
        {
          "input": [100],
          "expected_output": 100
        }
      ]
    },
    {
      "problem_id": 5,
      "title": "Calculate Factorial",
      "func_name":"fact",
      "description": "Write a function named 'fact' to calculate the factorial of a non-negative integer.",
      "solution_code": "def fact(n):\n    if n==0:\n        return 1\n    else:\n        return n*fact(n-1)",
      "test_cases": [
        {
          "input": 5,
          "expected_output": 120
        },
        {
          "input": 0,
          "expected_output": 1
        },
        {
          "input": 3,
          "expected_output": 6
        }
      ]
    },
    {
      "problem_id": 6,
      "title": "Count Vowels in a String",
      "func_name":"count_vowels",
      "description": "Write a function named 'count_vowels' that takes a string and returns the number of vowels (a, e, i, o, u) in it.",
      "solution_code": "def count_vowels(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count",
      "test_cases": [
        {
          "input": "hello",
          "expected_output": 2
        },
        {
          "input": "AEIOU",
          "expected_output": 5
        },
        {
          "input": "rhythm",
          "expected_output": 0
        }
      ]
    },
    {
      "problem_id": 7,
      "title": "Check for Palindrome",
      "func_name":"is_palin",
      "description": "Write a function named 'is_palin' that checks if a string is a palindrome (reads the same forwards and backwards).",
      "solution_code": "def is_palin(s):\n    return s.lower()==s.lower()[::-1]",
      "test_cases": [
        {
          "input": "racecar",
          "expected_output": "True"
        },
        {
          "input": "hello",
          "expected_output": "False"
        },
        {
          "input": "Madam",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": 8,
      "title": "Find the Smallest Number in a List",
      "func_name":"find_min",
      "description": "Write a function named 'find_min' that takes a list of numbers and returns the smallest number.",
      "solution_code": "def find_min(nums):\n    return min(nums)",
      "test_cases": [
        {
          "input": [10, 5, 2, 8, 3],
          "expected_output": 2
        },
        {
          "input": [-10, -2, -5],
          "expected_output": -10
        },
        {
          "input": [100],
          "expected_output": 100
        }
      ]
    },
    {
      "problem_id": 9,
      "title": "Sum all Numbers in a List",
      "func_name":"sum_list",
      "description": "Write a function named 'sum_list' that takes a list of numbers and returns their sum.",
      "solution_code": "def sum_list(nums):\n    return sum(nums)",
      "test_cases": [
        {
          "input": [1, 2, 3, 4],
          "expected_output": 10
        },
        {
          "input": [0, 0, 0],
          "expected_output": 0
        },
        {
          "input": [10, -5, 2],
          "expected_output": 7
        }
      ]
    },
    {
      "problem_id": 10,
      "title": "Remove Duplicates from a List",
      "func_name":"remove_dupes",
      "description": "Write a function named 'remove_dupes' that takes a list and returns a new list with all duplicates removed.",
      "solution_code": "def remove_dupes(l):\n    return list(set(l))",
      "test_cases": [
        {
          "input": [1, 2, 2, 3, 4, 4, 5],
          "expected_output": [1, 2, 3, 4, 5]
        },
        {
          "input": ["a", "b", "c", "a"],
          "expected_output": ["a", "b", "c"]
        },
        {
          "input": [1, 1, 1],
          "expected_output": [1]
        }
      ]
    },
    {
      "problem_id": 11,
      "title": "Calculate Average",
      "func_name":"calc_avg",
      "description": "Write a function named 'calc_avg' that takes a list of numbers and returns their average.",
      "solution_code": "def calc_avg(nums):\n    if not nums:\n        return 0\n    return sum(nums)/len(nums)",
      "test_cases": [
        {
          "input": [1, 2, 3, 4, 5],
          "expected_output": 3.0
        },
        {
          "input": [10, 20, 30],
          "expected_output": 20.0
        },
        {
          "input": [],
          "expected_output": 0
        }
      ]
    },
    {
      "problem_id": 12,
      "title": "Find the Longest Word",
      "func_name":"find_longest_word",
      "description": "Write a function named 'find_longest_word' that takes a list of words and returns the longest word.",
      "solution_code": "def find_longest_word(words):\n    return max(words, key=len)",
      "test_cases": [
        {
          "input": ["apple", "banana", "kiwi"],
          "expected_output": "banana"
        },
        {
          "input": ["a", "bb", "ccc"],
          "expected_output": "ccc"
        },
        {
          "input": ["one"],
          "expected_output": "one"
        }
      ]
    },
    {
      "problem_id": 13,
      "title": "Is String a Substring?",
      "func_name":"is_substring",
      "description": "Write a function named 'is_substring' that checks if a string is a substring of another string.",
      "solution_code": "def is_substring(sub, main):\n    return sub in main",
      "test_cases": [
        {
          "input": ["world", "hello world"],
          "expected_output": "True"
        },
        {
          "input": ["moon", "sun"],
          "expected_output": "False"
        },
        {
          "input": ["", "any string"],
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": 14,
      "title": "Calculate Circle Area",
      "func_name":"circle_area",

      "description": "Write a function named 'circle_area' that takes the radius of a circle and returns its area. You would be expected to import math.pi",
      "solution_code": "import math\ndef circle_area(r):\n    return math.pi*r**2",
      "test_cases": [
        {
          "input": 1,
          "expected_output": 3.141592653589793
        },
        {
          "input": 0,
          "expected_output": 0.0
        },
        {
          "input": 2.5,
          "expected_output": 19.634954084936208
        }
      ]
    },
    {
      "problem_id": 15,
      "title": "Convert Celsius to Fahrenheit",
      "func_name":"c_to_f",
      "description": "Write a function named 'c_to_f' that converts a temperature from Celsius to Fahrenheit.",
      "solution_code": "def c_to_f(c):\n    return (c*9/5)+32",
      "test_cases": [
        {
          "input": 0,
          "expected_output": 32.0
        },
        {
          "input": 100,
          "expected_output": 212.0
        },
        {
          "input": -40,
          "expected_output": -40.0
        }
      ]
    },
    {
      "problem_id": 16,
      "title": "Count Words in a String",
      "func_name":"count_words",
      "description": "Write a function named 'count_words' that counts the number of words in a given string.",
      "solution_code": "def count_words(s):\n    return len(s.split())",
      "test_cases": [
        {
          "input": "Hello world",
          "expected_output": 2
        },
        {
          "input": "This is a test sentence.",
          "expected_output": 5
        },
        {
          "input": "oneword",
          "expected_output": 1
        }
      ]
    },
    {
      "problem_id": 17,
      "title": "Find First Uppercase Letter",
      "func_name":"find_first_uppercase",
      "description": "Write a function named 'find_first_uppercase' that finds the first uppercase letter in a string.",
      "solution_code": "def find_first_uppercase(s):\n    for char in s:\n        if 'A' <= char <= 'Z':\n            return char\n    return None",
      "test_cases": [
        {
          "input": "helloWorld",
          "expected_output": "W"
        },
        {
          "input": "alllowercase",
          "expected_output": null
        },
        {
          "input": "UPPERCASE",
          "expected_output": "U"
        }
      ]
    },
    {
      "problem_id": 18,
      "title": "Generate a Fibonacci Sequence",
      "func_name":"fibonacci_sequence",

      "description": "Write a function named 'fibonacci_sequence' that generates a Fibonacci sequence up to a given number of terms.",
      "solution_code": "def fibonacci_sequence(n):\n    sequence = []\n    a, b = 0, 1\n    while len(sequence) < n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence",
      "test_cases": [
        {
          "input": 5,
          "expected_output": [0, 1, 1, 2, 3]
        },
        {
          "input": 1,
          "expected_output": [0]
        },
        {
          "input": 0,
          "expected_output": []
        }
      ]
    },
    {
      "problem_id": 19,
      "title": "Check if a Number is Prime",
      "func_name":"is_prime",
      "description": "Write a function named 'is_prime' that checks if a number is a prime number.",
      "solution_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
      "test_cases": [
        {
          "input": 7,
          "expected_output": "True"
        },
        {
          "input": 10,
          "expected_output": "False"
        },
        {
          "input": 1,
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": 20,
      "title": "FizzBuzz",
      "func_name":"fizzbuzz",
      "description": "Write a function named 'fizzbuzz' that prints numbers from 1 to 15. For multiples of 3 print 'Fizz', for multiples of 5 print 'Buzz', and for multiples of both, print 'FizzBuzz'.",
      "solution_code": "def fizzbuzz():\n    results = []\n    for i in range(1, 16):\n        if i % 3 == 0 and i % 5 == 0:\n            results.append('FizzBuzz')\n        elif i % 3 == 0:\n            results.append('Fizz')\n        elif i % 5 == 0:\n            results.append('Buzz')\n        else:\n            results.append(str(i))\n    return results",
      "test_cases": [
        {
          "input": null,
          "expected_output": ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz"]
        }
      ]
    },
    {
      "problem_id": 21,
      "title": "Merge Two Lists",
      "func_name":"merge_lists",
      "description": "Write a function named 'merge_lists' that takes two lists and returns a new list containing all elements from both.",
      "solution_code": "def merge_lists(list1, list2):\n    return list1 + list2",
      "test_cases": [
        {
          "input": [[1, 2], [3, 4]],
          "expected_output": [1, 2, 3, 4]
        },
        {
          "input": [["a"], ["b", "c"]],
          "expected_output": ["a", "b", "c"]
        },
        {
          "input": [[], [1, 2, 3]],
          "expected_output": [1, 2, 3]
        }
      ]
    },
    {
      "problem_id": 22,
      "title": "Check if List is Sorted",
      "func_name":"is_sorted",
      "description": "Write a function named 'is_sorted' that returns True if a list is sorted in ascending order, otherwise False.",
      "solution_code": "def is_sorted(l):\n    return l==sorted(l)",
      "test_cases": [
        {
          "input": [1, 2, 3, 4],
          "expected_output": "True"
        },
        {
          "input": [4, 3, 2, 1],
          "expected_output": "False"
        },
        {
          "input": [1, 3, 2],
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": 23,
      "title": "Reverse a List",
      "func_name":"rev_list",
      "description": "Write a function named 'rev_list' that reverses the order of elements in a list.",
      "solution_code": "def rev_list(l):\n    return l[::-1]",
      "test_cases": [
        {
          "input": [1, 2, 3],
          "expected_output": [3, 2, 1]
        },
        {
          "input": ["a", "b", "c"],
          "expected_output": ["c", "b", "a"]
        },
        {
          "input": [10],
          "expected_output": [10]
        }
      ]
    },
    {
      "problem_id": 24,
      "title": "Sum of Digits",
      "func_name":"sum_digits",
      "description": "Write a function named 'sum_digits' that calculates the sum of the digits of an integer.",
      "solution_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
      "test_cases": [
        {
          "input": 123,
          "expected_output": 6
        },
        {
          "input": 999,
          "expected_output": 27
        },
        {
          "input": 0,
          "expected_output": 0
        }
      ]
    },

    {
      "problem_id": 25,
      "func_name":"is_num",
      "title": "Check if a String Contains Only Digits",
      "description": "Write a function named 'is_num' that returns True if a string contains only digits, otherwise False.",
      "solution_code": "def is_num(s):\n    return s.isdigit()",
      "test_cases": [
        {
          "input": "12345",
          "expected_output": "True"
        },
        {
          "input": "123a45",
          "expected_output": "False"
        },
        {
          "input": "",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": 26,
      "func_name":"swap_first_last",
      "title": "Swap First and Last Elements of a List",
      "description": "Write a function named 'swap_first_last' that swaps the first and last elements of a list and returns the modified list.",
      "solution_code": "def swap_first_last(l):\n    if len(l) > 1:\n        l[0], l[-1] = l[-1], l[0]\n    return l",
      "test_cases": [
        {
          "input": [1, 2, 3, 4],
          "expected_output": [4, 2, 3, 1]
        },
        {
          "input": ["a", "b", "c"],
          "expected_output": ["c", "b", "a"]
        },
        {
          "input": [10],
          "expected_output": [10]
        }
      ]
    },
    {
      "problem_id": 27,
      "title": "Convert a String to a List of Characters",
      "func_name":"str_to_list",
      "description": "Write a function named 'str_to_list' that takes a string and converts it into a list of its characters.",
      "solution_code": "def str_to_list(s):\n    return list(s)",
      "test_cases": [
        {
          "input": "hello",
          "expected_output": ["h", "e", "l", "l", "o"]
        },
        {
          "input": "Python",
          "expected_output": ["P", "y", "t", "h", "o", "n"]
        },
        {
          "input": "",
          "expected_output": []
        }
      ]
    },
    {
      "problem_id": 28,
      "func_name":"all_uniques",
      "title": "Check if all Elements in a List are Unique",
      "description": "Write a function named 'all_uniques' that returns True if all elements in a list are unique, otherwise False.",
      "solution_code": "def all_uniques(l):\n    return len(l)==len(set(l))",
      "test_cases": [
        {
          "input": [1, 2, 3, 4],
          "expected_output": "True"
        },
        {
          "input": [1, 2, 2, 3],
          "expected_output": "False"
        },
        {
          "input": [],
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": 29,
      "title": "Find the Intersection of Two Lists",
      "func_name":"list_intersection",
      "description": "Write a function named 'list_intersection' that takes two lists and returns a new list containing only the elements that are common to both.",
      "solution_code": "def list_intersection(list1, list2):\n    return list(set(list1) & set(list2))",
      "test_cases": [
        {
          "input": [[1, 2, 3], [3, 4, 5]],
          "expected_output": [3]
        },
        {
          "input": [[1, 2], [3, 4]],
          "expected_output": []
        },
        {
          "input": [["a", "b"], ["b", "c"]],
          "expected_output": ["b"]
        }
      ]
    }
  ]
